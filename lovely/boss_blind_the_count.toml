[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# logic so i will not suffer i lot
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''SMODS.calculate_individual_effect = function(effect, scored_card, key, amount, from_edition)'''
position = "after"
payload = '''
is_boss_add_chips_active = false
if G.GAME.blind.name == 'bl_watsau_the_flip' then
    is_boss_add_chips_active = true
end
is_boss_add_mult_active = false
if G.GAME.blind.name == 'bl_watsau_the_product' then
    is_boss_add_mult_active = true
end
print(key)
'''
match_indent = true
overwrite = false

# smods/src/utils.lua
# modify it when blind is true

# replace +Mult into +Chips pain
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = """if (key == 'mult' or key == 'h_mult' or key == 'mult_mod') and amount then
        mult = mod_mult(mult + amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type = 'variable', key = amount > 0 and 'a_mult' or 'a_mult_minus', vars = {amount}}, mult_mod = amount, colour = G.C.DARK_EDITION, edition = true})
            else
                if key ~= 'mult_mod' then
                    if effect.mult_message then
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.mult_message)
                    else
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'mult', amount, percent)
                    end
                end
            end
        end
        return true
    end"""
position = "at"
payload = """
if (key == 'mult' or key == 'h_mult' or key == 'mult_mod') and amount then
    if is_boss_add_chips_active == true then
        hand_chips = mod_chips(hand_chips + amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type = 'variable', key = amount > 0 and 'a_chips' or 'a_chips_minus', vars = {amount}}, chip_mod = amount, colour = G.C.EDITION, edition = true})
            else
                if key ~= 'mult_mod' then
                    if effect.chip_message then
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.chip_message)
                    else
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'chips', amount, percent, nil, effect.chip_message)
                    end
                else
                    if string.match(amount, "%+%d+ Mult") then
                        amount = string.match(amount, "%+?(%d+)")
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'chips', amount, percent, nil, effect.chip_message)
                    else
                    end
                    
                end

            end
        end

        return true
    else
        mult = mod_mult(mult + amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type = 'variable', key = amount > 0 and 'a_mult' or 'a_mult_minus', vars = {amount}}, mult_mod = amount, colour = G.C.DARK_EDITION, edition = true})
            else
                if key ~= 'mult_mod' then
                    if effect.mult_message then
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.mult_message)
                    else
                        card_eval_status_text(scored_card or effect.card or effect.focus, 'mult', amount, percent)
                    end
                end
            end
        end
        return true

    end
end
"""
match_indent = true
overwrite = false

# idk
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """if not extra.edition and (extra.mult_mod or extra.Xmult_mod)  then
            colour = G.C.MULT
        end"""
position = "at"
payload = """if is_boss_add_chips_active = true then
    if not extra.edition and (extra.mult_mod)  then
            colour = G.C.CHIPS
        end
        if not extra.edition and (extra.Xmult_mod)  then
            colour = G.C.MULT
        end
else
    if not extra.edition and (extra.mult_mod or extra.Xmult_mod)  then
            colour = G.C.MULT
        end
end
"""
match_indent = true
overwrite = false


# smods/src/utils.lua
# modify it when blind is true

# replace XMult into +mult pain
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = """if (key == 'x_mult' or key == 'xmult' or key == 'Xmult' or key == 'x_mult_mod' or key == 'Xmult_mod') and amount ~= 1 then
        if effect.card and effect.card ~= scored_card then juice_card(effect.card) end
        mult = mod_mult(mult * amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= amount > 0 and 'a_xmult' or 'a_xmult_minus',vars={amount}}, Xmult_mod =  amount, colour =  G.C.EDITION, edition = true})
            else
                if key ~= 'Xmult_mod' then
                    if effect.xmult_message then
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.xmult_message)
                    else
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'x_mult', amount, percent)
                    end
                end
            end
        end
        return true
    end"""
position = "at"
payload = """
if  (key == 'x_mult' or key == 'xmult' or key == 'Xmult' or key == 'x_mult_mod' or key == 'Xmult_mod') and amount ~= 1 then
    if is_boss_add_mult_active == true then
        if effect.card and effect.card ~= scored_card then juice_card(effect.card) end
        mult = mod_mult(mult + amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= amount > 0 and 'a_mult' or 'a_mult_minus',vars={amount}}, mult_mod =  amount, colour =  G.C.EDITION, edition = true})
            else
                if key ~= 'Xmult_mod' then
                    if effect.xmult_message then
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.mult_message)
                    else
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'mult', amount, percent)
                    end
                -- else    
                --         card_eval_status_text(scored_card or effect.card or effect.focus, 'mult', amount, percent, nil, effect.mult_message)
                end
            end
        end
        return true
    else
        if effect.card and effect.card ~= scored_card then juice_card(effect.card) end
        mult = mod_mult(mult * amount)
        update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})
        if not effect.remove_default_message then
            if from_edition then
                card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= amount > 0 and 'a_xmult' or 'a_xmult_minus',vars={amount}}, Xmult_mod =  amount, colour =  G.C.EDITION, edition = true})
            else
                if key ~= 'Xmult_mod' then
                    if effect.xmult_message then
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect.xmult_message)
                    else
                        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'x_mult', amount, percent)
                    end
                end
            end
        end
        return true

    end
end
"""
match_indent = true
overwrite = false


# patch message thingy
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = """if key == 'message' then
        if effect.card and effect.card ~= scored_card then juice_card(effect.card) end
        card_eval_status_text(effect.message_card or effect.juice_card or scored_card or effect.card or effect.focus, 'extra', nil, percent, nil, effect)
        return true
    end"""
position = "at"
payload = """
print(key .. " | " .. amount .. " | ")
if key == 'message'  then 
    print(key .. " | " .. amount .. " | " )
    if is_boss_add_chips_active == true then
        if string.match(amount, "%+%d+ Mult") then
            amount = tonumber(string.match(amount, "%+?(%d+)"))
            card_eval_status_text(scored_card or effect.card or effect.focus, 'chips', amount, percent, nil, effect.chip_message)
            return true
        end
    elseif is_boss_add_mult_active == true then
        
        if string.match(amount, "[^%-]%f[%a]X%d+%.?%d* Mult") or string.match(amount, "^X%d+%.?%d* Mult") then
            print("Positive Mult")
            amount = tonumber(string.match(amount, "[^%-]?X(%d+%.?%d*) Mult"))
            card_eval_status_text(scored_card or effect.card or effect.focus, 'mult', amount, percent, nil, effect.mult_message)
            return true
        else 
            print("Negative Mult")
            amount = tonumber(string.match(amount, "X(%d+%.?%d*) Mult"))
            amount = -1 * amount
            print(amount)
            card_eval_status_text(scored_card or effect.card or effect.focus, 'x_mult', amount, percent, nil, effect.mult_message)
        end

    else
        return SMODS.calculate_effect(amount, scored_card)
    end
end
"""
match_indent = true
overwrite = false
